# -*- coding: utf-8 -*-
"""Topsis_commandline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YqOdDIKIPeQNhLoB9SSmD2Jjhf4jISUf
"""

import pandas as pd
import numpy as np
import sys

def topsis(data,weights,impacts,output_file):
  df = data
  df.drop(data[1],axis=1)
  mat = np.array(df)
  w = np.array(weights)
  i = np.array(impacts)
  normalized_mat = mat/np.linalg.norm(mat, axis=0)
  weighted_normalized_mat = normalized_mat*w
  if '-' in impacts:
    ideal_best = np.min(weighted_normalized_mat,axis=0)
    ideal_worst = np.max(weighted_normalized_mat,axis=0)
  else:
    ideal_best = np.max(weighted_normalized_mat,axis=0)
    ideal_worst = np.min(weighted_normalized_mat,axis=0)
  eucledian_dist_best = np.linalg.norm(weighted_normalized_mat-ideal_best,axis=1)
  eucledian_dist_worst = np.linalg.norm(weighted_normalized_mat-ideal_worst,axis=1)
  performance_score = eucledian_dist_worst/(eucledian_dist_best + eucledian_dist_worst)
  Topsis_ranking = np.argsort(performance_score)+1
  data['Topsis_Score'] = pd.DataFrame(performance_score, columns = ['Topsis_Score'])
  data['Topsis_Rank'] =  pd.DataFrame(Topsis_ranking, columns = ['Topsis_Rank'])
  return data.to_csv(output_file, index=False)

def main():
  if len(sys.argv) != 5:
        print("Incorrect number of parameters.")
        sys.exit(1)
  input_file = sys.argv[1]
  weights_input = sys.argv[2]
  impacts_input = sys.argv[3]
  output_file = sys.argv[4]

  try:
    df = pd.read_csv(input_file)
  except FileNotFoundError:
    print(f"File not found: {input_file}")
    sys.exit(1)

  if len(df.columns) < 3:

    print("Input file must contain three or more columns.")
    sys.exit(1)

  for col in df.columns[1:]:
    if df[col].dtype != 'float64':
      print("Column must contain numeric values only.")
      sys.exit(1)

  if len(weights_input.split(',')) < 2:
    print("Weights must be comma-separated.")
    sys.exit(1)

  if len(impacts_input.split(',')) < 2:
    print("Impacts must be comma-separated.")
    sys.exit(1)

  weights = [float(wt) for wt in weights_input.split(',')]
  impacts = list(impacts_input)

  if len(weights) != len(impacts) or len(weights) != (len(df.columns) - 1):
    print("Number of weights, number of impacts, and number of columns containing numeric values must be  same.")
    sys.exit(1)

  if any(ele not in ['+', '-'] for ele in impacts):
    print("Impacts must be either '+' or '-'")
    sys.exit(1)

  topsis(df,weights,impacts,output_file)

if __name__ == "__main__":
    main()